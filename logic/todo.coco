coco TodoList

// The persistant state is used to define stateful values
// managed internally by the logic
// State variables can be accessed by using their variable
// names as endpoints

// Here we create a state for a user which will contain a 
// array of the todos for the users
state persistent:
    todos []Todo
    owner Address
    secondaryUsers []SecondaryAddr

// The class Todo is a structure for defining a Todo,
// where it can possess multiple fields and methods
class Todo:
    field name String
    field completed Bool

class SecondaryAddr:
    field address Address

// InitOwner!() deployer is a constructor that assigns a 
// value to the state variable owner
endpoint deployer Init!():
    mutate Address(Sender) -> TodoList.State.owner
         

// Function to check if the caller is the owner of the Logic
func onlyOwner():
    observe owner <- TodoList.State.owner:
        if(Address(Sender) != owner):
            throw "Not an Owner"

// Add!() is an invokable that adds the given Todo to
// the list of  Todo's
endpoint invokable Add!(name String):
    onlyOwner()

    var todo = Todo{name: name, completed: false}

    mutate todos <- TodoList.State.todos:
        todos = append(todos, todo)

// MarkCompleted!() is an invokable that marks the given
// todo as completed
endpoint invokable MarkTodoCompleted!(id U64):
    onlyOwner()

    mutate todos <- TodoList.State.todos:
            todos[id].completed = true

endpoint invokable AddUser!(secondaryUser Address):
    onlyOwner()
    var address = SecondaryAddr{address: secondaryUser}

    mutate secondaryUsers <- TodoList.State.secondaryUsers:
        secondaryUsers = append(secondaryUsers, address) 

// You might have noticed
// We used '!' after the endpoint name
// That is to indicate that this 
// endpoint mutates the logic's state.
